from aiogram import F, Router, Bot
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import logging

import app.keyboards as kb

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

# Define states for the form
class Form(StatesGroup):
    name = State()
    phone = State()
    car_model = State()
    budget = State()
    comment = State()
    confirmation = State()

@router.message(F.text == '–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ—Å—á–µ—Ç –∞–≤—Ç–æ üü¢')
async def start_form(message: Message, state: FSMContext):
    await state.set_state(Form.name)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=ReplyKeyboardRemove())

@router.message(Form.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Form.phone)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@router.message(Form.phone)
async def process_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.set_state(Form.car_model)
    await message.answer("–ö–∞–∫—É—é –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤—ã –∏—â–µ—Ç–µ?")

@router.message(Form.car_model)
async def process_car_model(message: Message, state: FSMContext):
    await state.update_data(car_model=message.text)
    await state.set_state(Form.budget)
    await message.answer("–ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É?")

@router.message(Form.budget)
async def process_budget(message: Message, state: FSMContext):
    await state.update_data(budget=message.text)
    await state.set_state(Form.comment)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ, –µ—Å–ª–∏ –∏–º–µ–µ—Ç—Å—è, –∫–æ–º–º. –ø–æ –≤—ã–±–æ—Ä—É:/n"
                         "—Ü–≤–µ—Ç, –≥–æ–¥, –ø—Ä–æ–±–µ–≥, —Ç–æ–ø–ª–∏–≤–æ, –ø—Ä–∏–≤–æ–¥, –æ–±—ä–µ–º –¥–≤.. ?")

@router.message(Form.comment)
async def process_comment(message: Message, state: FSMContext):
    await state.update_data(comment=message.text)
    data = await state.get_data()
    await state.set_state(Form.confirmation)
    confirmation_text = (
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–ò–º—è: {data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {data['car_model']}\n"
        f"–ë—é–¥–∂–µ—Ç: {data['budget']}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}\n"
        f"–í—Å–µ –≤–µ—Ä–Ω–æ?"
    )
    await message.answer(confirmation_text, reply_markup=kb.confirmation_menu)

@router.callback_query(F.data == "confirm", Form.confirmation)
async def process_confirmation(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    manager_chat_ids = [1101051783, 347709146]  
    logger.info(f"Attempting to send message to manager_chat_ids: {manager_chat_ids}")
    manager_message = (
        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
        f"–ò–º—è: {data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {data['car_model']}\n"
        f"–ë—é–¥–∂–µ—Ç: {data['budget']}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}"
    )
    for manager_chat_id in manager_chat_ids:
        try:
            await bot.send_message(chat_id=manager_chat_id, text=manager_message)
            logger.info(f"Message sent successfully to manager_chat_id: {manager_chat_id}")
        except Exception as e:
            logger.error(f"Error sending message to manager {manager_chat_id}: {e}")
    await callback.message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.", reply_markup=kb.main_menu)
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "cancel", Form.confirmation)
async def process_cancel(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=kb.main_menu)
    await state.clear()
    await callback.answer()
